import {
  FIELDS_PREFIX,
  SPECIAL_KEY,
  createSource
} from "./4OE77JRV.chunk.js";

// packages/watcher/index.ts
var Watcher = class {
  constructor() {
    this.SPECIAL_KEY = SPECIAL_KEY;
  }
  init(initObj, options = {}) {
    if (typeof initObj === "object" && !Array.isArray(initObj)) {
      if (options.provider)
        this.savedProvider = options.provider;
      this.sourceObj = createSource(
        initObj,
        options.methods,
        options.provider || this.savedProvider
      );
    }
    if (options.broadcastName)
      this.createBroadcast(options.broadcastName);
  }
  createBroadcast(broadcastName = "broadcastWatcher") {
    this.broadcast = new BroadcastChannel(broadcastName);
    this.broadcast.onmessage = ({ data }) => {
      if (data === "needSome") {
        this.broadcast.postMessage({ data: this.get() });
      } else if (data.type === void 0) {
        for (const key in data.data)
          this.sourceObj[key] = data.data[key];
      } else {
      }
    };
    this.broadcast.postMessage("needSome");
  }
  set(propertyName, value, ignoreBroadcast = false) {
    if (this.sourceObj) {
      this.sourceObj[propertyName] = value;
    }
    if (this.broadcast && !ignoreBroadcast) {
      this.broadcast.postMessage({ type: propertyName, data: value });
    }
  }
  get(propertyName) {
    if (this.sourceObj && propertyName) {
      return this.sourceObj[propertyName];
    } else if (!propertyName) {
      return this.sourceObj[`${FIELDS_PREFIX}data`];
    }
  }
  watch(propertyName) {
    const index = this.sourceObj[`${FIELDS_PREFIX}onUpdate`].length;
    return new Promise((resolve) => {
      this.sourceObj[`${FIELDS_PREFIX}onUpdate`] = [
        ...this.sourceObj[`${FIELDS_PREFIX}onUpdate`],
        (updatedProperty) => {
          if (propertyName === updatedProperty) {
            resolve(this.sourceObj[propertyName]);
            this.sourceObj[`${FIELDS_PREFIX}onUpdate`][index] = null;
            if (this.sourceObj[`${FIELDS_PREFIX}onUpdate`].every((i) => i === null))
              this.sourceObj[`${FIELDS_PREFIX}onUpdate`] = [];
          }
        }
      ];
    });
  }
  watchFor(propertyName, neededValue) {
    const index = this.sourceObj[`${FIELDS_PREFIX}onUpdate`].length;
    return new Promise((resolve) => {
      this.sourceObj[`${FIELDS_PREFIX}onUpdate`] = [
        ...this.sourceObj[`${FIELDS_PREFIX}onUpdate`],
        (updatedProperty) => {
          if (propertyName === updatedProperty && this.sourceObj[propertyName] === neededValue) {
            resolve(this.sourceObj[propertyName]);
            this.sourceObj[`${FIELDS_PREFIX}onUpdate`][index] = null;
            if (this.sourceObj[`${FIELDS_PREFIX}onUpdate`].every((i) => i === null))
              this.sourceObj[`${FIELDS_PREFIX}onUpdate`] = [];
          }
        }
      ];
    });
  }
};
var watcherCreator = (obj, provider, methods, broadcastName) => {
  const watcher = new Watcher();
  watcher.init(obj, { provider, methods, broadcastName });
  return watcher;
};

export {
  Watcher,
  watcherCreator
};
//# sourceMappingURL=data:application/json;base64,
