import {
  REACTION_STACK
} from "./HVJOCNRK.chunk.js";
import {
  FIELDS_PREFIX
} from "./GWKM27VZ.chunk.js";

// packages/react-provider/index.ts
import React from "react";
var hasWarned = false;
var simpleHook = (context, prop) => {
  const useSync = React.useSyncExternalStore;
  if (!useSync) {
    return context[`${FIELDS_PREFIX}data`][prop];
  }
  const state = useSync(
    (notify) => {
      try {
        const currentProp = prop;
        if (context[`${FIELDS_PREFIX}listeners`][currentProp] && typeof context[`${FIELDS_PREFIX}listeners`][currentProp].set === "function") {
          context[`${FIELDS_PREFIX}listeners`][currentProp].set(notify, notify);
        }
        if (context[`${FIELDS_PREFIX}criticalFields`] && typeof context[`${FIELDS_PREFIX}criticalFields`].set === "function") {
          context[`${FIELDS_PREFIX}criticalFields`].set(notify, [currentProp]);
        }
        if (context[`${FIELDS_PREFIX}muppet`] && typeof context[`${FIELDS_PREFIX}muppet`].set === "function") {
          context[`${FIELDS_PREFIX}muppet`].set(notify, true);
        }
      } catch (err) {
        console.error("Error during subscribe:", err, prop);
      }
      return () => {
        try {
          context[`${FIELDS_PREFIX}muppet`]?.set(notify, false);
          const fields = context[`${FIELDS_PREFIX}criticalFields`]?.get(notify);
          if (fields) {
            fields.forEach((p) => {
              context[`${FIELDS_PREFIX}listeners`][p]?.delete(notify);
            });
          }
          context[`${FIELDS_PREFIX}criticalFields`]?.delete(notify);
          context[`${FIELDS_PREFIX}muppet`]?.delete(notify);
        } catch (err) {
          console.error("Error during unsubscribe:", err);
        }
      };
    },
    () => {
      try {
        return context[`${FIELDS_PREFIX}data`];
      } catch (error) {
        return {};
      }
    },
    () => {
      try {
        return context[`${FIELDS_PREFIX}data`];
      } catch (error) {
        return {};
      }
    }
  );
  return state ? state[prop] : context[`${FIELDS_PREFIX}data`][prop];
};
function simpleReactProvider(prop) {
  let isInReactRender = false;
  if (!hasWarned) {
    console.warn(`[Repka] \u0412\u041D\u0418\u041C\u0410\u041D\u0418\u0415: \u041E\u0431\u043D\u0430\u0440\u0443\u0436\u0435\u043D \u043F\u0440\u044F\u043C\u043E\u0439 \u0434\u043E\u0441\u0442\u0443\u043F \u043A 'state.${String(prop)}' \u0432 \u0440\u0435\u043D\u0434\u0435\u0440\u0435...`);
    hasWarned = true;
  }
  if (React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE) {
    if (React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE?.H !== null) {
      isInReactRender = true;
    }
  } else if (React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentDispatcher?.current) {
    isInReactRender = true;
  }
  if (!isInReactRender) {
    return this[`${FIELDS_PREFIX}data`][prop];
  }
  const currentReaction = REACTION_STACK[REACTION_STACK.length - 1];
  if (currentReaction) {
    currentReaction.reportDependency(this, prop);
    return this[`${FIELDS_PREFIX}data`][prop];
  }
  try {
    React.useId();
  } catch (error) {
    return this[`${FIELDS_PREFIX}data`][prop];
  }
  return simpleHook(this, prop);
}

export {
  simpleHook,
  simpleReactProvider
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcGFja2FnZXMvcmVhY3QtcHJvdmlkZXIvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGSUVMRFNfUFJFRklYIH0gZnJvbSAnY29yZS9kb21haW4nO1xuaW1wb3J0IHsgUkVBQ1RJT05fU1RBQ0sgfSBmcm9tICdyZWFjdGlvbic7XG5cbmxldCBoYXNXYXJuZWQgPSBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IHNpbXBsZUhvb2sgPSA8VCBleHRlbmRzIG9iamVjdD4oY29udGV4dDogYW55LCBwcm9wOiBrZXlvZiBUKTogVFtrZXlvZiBUXSA9PiB7XG4gIGNvbnN0IHVzZVN5bmMgPSBSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZTtcbiAgaWYgKCF1c2VTeW5jKSB7XG4gICAgcmV0dXJuIGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1kYXRhYF1bcHJvcF07XG4gIH1cblxuICBjb25zdCBzdGF0ZSA9IHVzZVN5bmMoXG4gICAgKG5vdGlmeSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3VycmVudFByb3AgPSBwcm9wO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bY3VycmVudFByb3BdICYmXG4gICAgICAgICAgdHlwZW9mIGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtjdXJyZW50UHJvcF0uc2V0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtjdXJyZW50UHJvcF0uc2V0KG5vdGlmeSwgbm90aWZ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXSAmJlxuICAgICAgICAgIHR5cGVvZiBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXS5zZXQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGV4dFtgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF0uc2V0KG5vdGlmeSwgW2N1cnJlbnRQcm9wXSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0gJiZcbiAgICAgICAgICB0eXBlb2YgY29udGV4dFtgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdLnNldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0uc2V0KG5vdGlmeSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZHVyaW5nIHN1YnNjcmliZTpcIiwgZXJyLCBwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0/LnNldChub3RpZnksIGZhbHNlKTtcblxuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdPy5nZXQobm90aWZ5KTtcbiAgICAgICAgICBpZiAoZmllbGRzKSB7XG4gICAgICAgICAgICBmaWVsZHMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgICAgY29udGV4dFtgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3BdPy5kZWxldGUobm90aWZ5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdPy5kZWxldGUobm90aWZ5KTtcbiAgICAgICAgICBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0/LmRlbGV0ZShub3RpZnkpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZHVyaW5nIHVuc3Vic2NyaWJlOlwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1kYXRhYF07XG4gICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0W2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByZXR1cm4gc3RhdGUgPyBzdGF0ZVtwcm9wXSA6IGNvbnRleHRbYCR7RklFTERTX1BSRUZJWH1kYXRhYF1bcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVSZWFjdFByb3ZpZGVyPFQgZXh0ZW5kcyBvYmplY3Q+KHByb3A6IGtleW9mIFQpOiBUW2tleW9mIFRdIHtcbiAgbGV0IGlzSW5SZWFjdFJlbmRlciA9IGZhbHNlO1xuXG4gIGlmICghaGFzV2FybmVkKSB7XG4gICAgY29uc29sZS53YXJuKGBbUmVwa2FdIFx1MDQxMlx1MDQxRFx1MDQxOFx1MDQxQ1x1MDQxMFx1MDQxRFx1MDQxOFx1MDQxNTogXHUwNDFFXHUwNDMxXHUwNDNEXHUwNDMwXHUwNDQwXHUwNDQzXHUwNDM2XHUwNDM1XHUwNDNEIFx1MDQzRlx1MDQ0MFx1MDQ0Rlx1MDQzQ1x1MDQzRVx1MDQzOSBcdTA0MzRcdTA0M0VcdTA0NDFcdTA0NDJcdTA0NDNcdTA0M0YgXHUwNDNBICdzdGF0ZS4ke1N0cmluZyhwcm9wKX0nIFx1MDQzMiBcdTA0NDBcdTA0MzVcdTA0M0RcdTA0MzRcdTA0MzVcdTA0NDBcdTA0MzUuLi5gKTtcblxuICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gIH1cblxuICBpZiAoUmVhY3QuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFKSB7XG5cdTAwQTAgXHUwMEEwIGlmIChSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREU/LkggIT09IG51bGwpIHtcblx1MDBBMCBcdTAwQTAgXHUwMEEwIGlzSW5SZWFjdFJlbmRlciA9IHRydWU7XG5cdTAwQTAgXHUwMEEwIH1cblx1MDBBMCB9IGVsc2UgaWYgKFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPy5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPy5jdXJyZW50KSB7XG5cdTAwQTAgXHUwMEEwIFx1MDBBMCBpc0luUmVhY3RSZW5kZXIgPSB0cnVlO1xuXHUwMEEwIH1cblxuICBpZiAoIWlzSW5SZWFjdFJlbmRlcikge1xuICAgIHJldHVybiB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdW3Byb3BdO1xuICB9XG5cbiAgY29uc3QgY3VycmVudFJlYWN0aW9uID0gUkVBQ1RJT05fU1RBQ0tbUkVBQ1RJT05fU1RBQ0subGVuZ3RoIC0gMV07XG4gIGlmIChjdXJyZW50UmVhY3Rpb24pIHtcbiAgICBjdXJyZW50UmVhY3Rpb24ucmVwb3J0RGVwZW5kZW5jeSh0aGlzLCBwcm9wIGFzIHN0cmluZyk7XG4gICAgcmV0dXJuIHRoaXNbYCR7RklFTERTX1BSRUZJWH1kYXRhYF1bcHJvcF07XG4gIH1cbiAgXG4gIHRyeSB7XG4gICAgUmVhY3QudXNlSWQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdGhpc1tgJHtGSUVMRFNfUFJFRklYfWRhdGFgXVtwcm9wXTtcbiAgfVxuXG4gIHJldHVybiBzaW1wbGVIb29rPFQ+KHRoaXMsIHByb3ApXG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7OztBQUFBLE9BQU8sV0FBVztBQUlsQixJQUFJLFlBQVk7QUFFVCxJQUFNLGFBQWEsQ0FBbUIsU0FBYyxTQUE4QjtBQUN2RixRQUFNLFVBQVUsTUFBTTtBQUN0QixNQUFJLENBQUMsU0FBUztBQUNaLFdBQU8sUUFBUSxHQUFHLGFBQWEsTUFBTSxFQUFFLElBQUk7QUFBQSxFQUM3QztBQUVBLFFBQU0sUUFBUTtBQUFBLElBQ1osQ0FBQyxXQUFXO0FBQ1YsVUFBSTtBQUNGLGNBQU0sY0FBYztBQUVwQixZQUNFLFFBQVEsR0FBRyxhQUFhLFdBQVcsRUFBRSxXQUFXLEtBQ2hELE9BQU8sUUFBUSxHQUFHLGFBQWEsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLFlBQ2pFO0FBQ0Esa0JBQVEsR0FBRyxhQUFhLFdBQVcsRUFBRSxXQUFXLEVBQUUsSUFBSSxRQUFRLE1BQU07QUFBQSxRQUN0RTtBQUVBLFlBQ0UsUUFBUSxHQUFHLGFBQWEsZ0JBQWdCLEtBQ3hDLE9BQU8sUUFBUSxHQUFHLGFBQWEsZ0JBQWdCLEVBQUUsUUFBUSxZQUN6RDtBQUNBLGtCQUFRLEdBQUcsYUFBYSxnQkFBZ0IsRUFBRSxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUM7QUFBQSxRQUNyRTtBQUVBLFlBQ0UsUUFBUSxHQUFHLGFBQWEsUUFBUSxLQUNoQyxPQUFPLFFBQVEsR0FBRyxhQUFhLFFBQVEsRUFBRSxRQUFRLFlBQ2pEO0FBQ0Esa0JBQVEsR0FBRyxhQUFhLFFBQVEsRUFBRSxJQUFJLFFBQVEsSUFBSTtBQUFBLFFBQ3BEO0FBQUEsTUFDRixTQUFTLEtBQUs7QUFDWixnQkFBUSxNQUFNLDJCQUEyQixLQUFLLElBQUk7QUFBQSxNQUNwRDtBQUVBLGFBQU8sTUFBTTtBQUNYLFlBQUk7QUFDRixrQkFBUSxHQUFHLGFBQWEsUUFBUSxHQUFHLElBQUksUUFBUSxLQUFLO0FBRXBELGdCQUFNLFNBQVMsUUFBUSxHQUFHLGFBQWEsZ0JBQWdCLEdBQUcsSUFBSSxNQUFNO0FBQ3BFLGNBQUksUUFBUTtBQUNWLG1CQUFPLFFBQVEsT0FBSztBQUNsQixzQkFBUSxHQUFHLGFBQWEsV0FBVyxFQUFFLENBQUMsR0FBRyxPQUFPLE1BQU07QUFBQSxZQUN4RCxDQUFDO0FBQUEsVUFDSDtBQUVBLGtCQUFRLEdBQUcsYUFBYSxnQkFBZ0IsR0FBRyxPQUFPLE1BQU07QUFDeEQsa0JBQVEsR0FBRyxhQUFhLFFBQVEsR0FBRyxPQUFPLE1BQU07QUFBQSxRQUNsRCxTQUFTLEtBQUs7QUFDWixrQkFBUSxNQUFNLDZCQUE2QixHQUFHO0FBQUEsUUFDaEQ7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBQ0EsTUFBTTtBQUNKLFVBQUk7QUFDRixlQUFPLFFBQVEsR0FBRyxhQUFhLE1BQU07QUFBQSxNQUN2QyxTQUFRLE9BQU87QUFDYixlQUFPLENBQUM7QUFBQSxNQUNWO0FBQUEsSUFDRjtBQUFBLElBQ0EsTUFBTTtBQUNKLFVBQUk7QUFDRixlQUFPLFFBQVEsR0FBRyxhQUFhLE1BQU07QUFBQSxNQUN2QyxTQUFTLE9BQU87QUFDZCxlQUFPLENBQUM7QUFBQSxNQUNWO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxTQUFPLFFBQVEsTUFBTSxJQUFJLElBQUksUUFBUSxHQUFHLGFBQWEsTUFBTSxFQUFFLElBQUk7QUFDbkU7QUFFTyxTQUFTLG9CQUFzQyxNQUEyQjtBQUMvRSxNQUFJLGtCQUFrQjtBQUV0QixNQUFJLENBQUMsV0FBVztBQUNkLFlBQVEsS0FBSyw0TUFBc0QsT0FBTyxJQUFJLENBQUMsd0RBQWdCO0FBRS9GLGdCQUFZO0FBQUEsRUFDZDtBQUVBLE1BQUksTUFBTSxpRUFBaUU7QUFDekUsUUFBSSxNQUFNLGlFQUFpRSxNQUFNLE1BQU07QUFDckYsd0JBQWtCO0FBQUEsSUFDcEI7QUFBQSxFQUNGLFdBQVcsTUFBTSxvREFBb0Qsd0JBQXdCLFNBQVM7QUFDbEcsc0JBQWtCO0FBQUEsRUFDdEI7QUFFQSxNQUFJLENBQUMsaUJBQWlCO0FBQ3BCLFdBQU8sS0FBSyxHQUFHLGFBQWEsTUFBTSxFQUFFLElBQUk7QUFBQSxFQUMxQztBQUVBLFFBQU0sa0JBQWtCLGVBQWUsZUFBZSxTQUFTLENBQUM7QUFDaEUsTUFBSSxpQkFBaUI7QUFDbkIsb0JBQWdCLGlCQUFpQixNQUFNLElBQWM7QUFDckQsV0FBTyxLQUFLLEdBQUcsYUFBYSxNQUFNLEVBQUUsSUFBSTtBQUFBLEVBQzFDO0FBRUEsTUFBSTtBQUNGLFVBQU0sTUFBTTtBQUFBLEVBQ2QsU0FBUyxPQUFPO0FBQ2QsV0FBTyxLQUFLLEdBQUcsYUFBYSxNQUFNLEVBQUUsSUFBSTtBQUFBLEVBQzFDO0FBRUEsU0FBTyxXQUFjLE1BQU0sSUFBSTtBQUNqQzsiLAogICJuYW1lcyI6IFtdCn0K
