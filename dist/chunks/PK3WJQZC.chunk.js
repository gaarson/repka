import {
  FIELDS_PREFIX
} from "./4OE77JRV.chunk.js";

// packages/react-provider/index.ts
import React from "react";
function reactProvider(parameter) {
  let useSync;
  let key = React.useId ? React.useId() : React.useRef(parseInt(String(Math.random() * 1e7), 10).toString()).current;
  if (React.useId) {
    useSync = React.useSyncExternalStore;
  }
  const state = useSync((notify) => {
    if (this[`${FIELDS_PREFIX}criticalFields`][key]) {
      this[`${FIELDS_PREFIX}criticalFields`][key].forEach((prop) => {
        if (this[`${FIELDS_PREFIX}listeners`][prop] && typeof this[`${FIELDS_PREFIX}listeners`][prop] !== "function")
          this[`${FIELDS_PREFIX}listeners`][prop].set(key, notify);
      });
    }
    return () => {
      if (this[`${FIELDS_PREFIX}criticalFields`][key]) {
        this[`${FIELDS_PREFIX}muppet`][key] = false;
        this[`${FIELDS_PREFIX}criticalFields`][key].forEach((prop) => {
          if (this[`${FIELDS_PREFIX}listeners`][prop] && typeof this[`${FIELDS_PREFIX}listeners`][prop] !== "function") {
            this[`${FIELDS_PREFIX}listeners`][prop].delete(key);
          }
        });
      }
    };
  }, () => {
    this[`${FIELDS_PREFIX}muppet`]["__PROVIDER_ID__"] = key;
    if (this[`${FIELDS_PREFIX}muppet`][key] === true) {
      this[`${FIELDS_PREFIX}muppet`]["__PROVIDER_ID__"] = void 0;
      return this[`${FIELDS_PREFIX}data`];
    }
    return this;
  });
  React.useEffect(() => {
    return () => {
      if (this[`${FIELDS_PREFIX}muppet`][key] && this[`${FIELDS_PREFIX}criticalFields`][key]) {
        delete this[`${FIELDS_PREFIX}criticalFields`][key];
        delete this[`${FIELDS_PREFIX}muppet`][key];
      }
    };
  }, []);
  if (parameter !== void 0) {
    return state[parameter];
  }
  return [state, this[`${FIELDS_PREFIX}methods`]];
}

export {
  reactProvider
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcGFja2FnZXMvcmVhY3QtcHJvdmlkZXIvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGSUVMRFNfUFJFRklYIH0gZnJvbSAnY29yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFjdFByb3ZpZGVyPFQsIE0+KHBhcmFtZXRlcj86IGtleW9mIFQpOiBbVCwgTV0ge1xuICBsZXQgdXNlU3luYztcbiAgbGV0IGtleSA9IFJlYWN0LnVzZUlkIFxuICAgID8gUmVhY3QudXNlSWQoKVxuICAgIDogUmVhY3QudXNlUmVmKHBhcnNlSW50KFN0cmluZygoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwKSksIDEwKS50b1N0cmluZygpKS5jdXJyZW50XG5cbiAgaWYgKFJlYWN0LnVzZUlkKSB7XG4gICAgdXNlU3luYyA9IFJlYWN0LnVzZVN5bmNFeHRlcm5hbFN0b3JlO1xuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB1c2VTeW5jKG5vdGlmeSA9PiB7XG4gICAgaWYgKHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdW2tleV0pIHtcbiAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdW2tleV0uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtwcm9wXSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bcHJvcF0gIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bcHJvcF0uc2V0KGtleSwgbm90aWZ5KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodGhpc1tgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF1ba2V5XSkge1xuICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF1ba2V5XSA9IGZhbHNlO1xuICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXVtrZXldLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bcHJvcF0uZGVsZXRlKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCAoKSA9PiB7XG4gICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdWydfX1BST1ZJREVSX0lEX18nXSA9IGtleTtcblxuICAgIGlmICh0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF1ba2V5XSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdWydfX1BST1ZJREVSX0lEX18nXSA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodGhpc1tgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW2tleV0gJiYgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF1ba2V5XSkge1xuICAgICAgICBkZWxldGUgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF1ba2V5XTtcbiAgICAgICAgZGVsZXRlIHRoaXNbYCR7RklFTERTX1BSRUZJWH1tdXBwZXRgXVtrZXldO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICBpZiAocGFyYW1ldGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gc3RhdGVbcGFyYW1ldGVyXTtcbiAgfVxuXG4gIHJldHVybiBbc3RhdGUsIHRoaXNbYCR7RklFTERTX1BSRUZJWH1tZXRob2RzYF1dO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7QUFBQSxPQUFPLFdBQVc7QUFHWCxTQUFTLGNBQW9CLFdBQTZCO0FBQy9ELE1BQUk7QUFDSixNQUFJLE1BQU0sTUFBTSxRQUNaLE1BQU0sTUFBTSxJQUNaLE1BQU0sT0FBTyxTQUFTLE9BQVEsS0FBSyxPQUFPLElBQUksR0FBUyxHQUFHLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRTtBQUU5RSxNQUFJLE1BQU0sT0FBTztBQUNmLGNBQVUsTUFBTTtBQUFBLEVBQ2xCO0FBRUEsUUFBTSxRQUFRLFFBQVEsWUFBVTtBQUM5QixRQUFJLEtBQUssR0FBRyxhQUFhLGdCQUFnQixFQUFFLEdBQUcsR0FBRztBQUMvQyxXQUFLLEdBQUcsYUFBYSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsUUFBUSxVQUFRO0FBQzFELFlBQ0UsS0FBSyxHQUFHLGFBQWEsV0FBVyxFQUFFLElBQUksS0FDdEMsT0FBTyxLQUFLLEdBQUcsYUFBYSxXQUFXLEVBQUUsSUFBSSxNQUFNO0FBQ25ELGVBQUssR0FBRyxhQUFhLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLLE1BQU07QUFBQSxNQUMzRCxDQUFDO0FBQUEsSUFDSDtBQUVBLFdBQU8sTUFBTTtBQUNYLFVBQUksS0FBSyxHQUFHLGFBQWEsZ0JBQWdCLEVBQUUsR0FBRyxHQUFHO0FBQy9DLGFBQUssR0FBRyxhQUFhLFFBQVEsRUFBRSxHQUFHLElBQUk7QUFDdEMsYUFBSyxHQUFHLGFBQWEsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLFFBQVEsVUFBUTtBQUMxRCxjQUNFLEtBQUssR0FBRyxhQUFhLFdBQVcsRUFBRSxJQUFJLEtBQ3RDLE9BQU8sS0FBSyxHQUFHLGFBQWEsV0FBVyxFQUFFLElBQUksTUFBTSxZQUNuRDtBQUNBLGlCQUFLLEdBQUcsYUFBYSxXQUFXLEVBQUUsSUFBSSxFQUFFLE9BQU8sR0FBRztBQUFBLFVBQ3BEO0FBQUEsUUFDRixDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFBQSxFQUNGLEdBQUcsTUFBTTtBQUNQLFNBQUssR0FBRyxhQUFhLFFBQVEsRUFBRSxpQkFBaUIsSUFBSTtBQUVwRCxRQUFJLEtBQUssR0FBRyxhQUFhLFFBQVEsRUFBRSxHQUFHLE1BQU0sTUFBTTtBQUNoRCxXQUFLLEdBQUcsYUFBYSxRQUFRLEVBQUUsaUJBQWlCLElBQUk7QUFDcEQsYUFBTyxLQUFLLEdBQUcsYUFBYSxNQUFNO0FBQUEsSUFDcEM7QUFFQSxXQUFPO0FBQUEsRUFDVCxDQUFDO0FBRUQsUUFBTSxVQUFVLE1BQU07QUFDcEIsV0FBTyxNQUFNO0FBQ1gsVUFBSSxLQUFLLEdBQUcsYUFBYSxRQUFRLEVBQUUsR0FBRyxLQUFLLEtBQUssR0FBRyxhQUFhLGdCQUFnQixFQUFFLEdBQUcsR0FBRztBQUN0RixlQUFPLEtBQUssR0FBRyxhQUFhLGdCQUFnQixFQUFFLEdBQUc7QUFDakQsZUFBTyxLQUFLLEdBQUcsYUFBYSxRQUFRLEVBQUUsR0FBRztBQUFBLE1BQzNDO0FBQUEsSUFDRjtBQUFBLEVBQ0YsR0FBRyxDQUFDLENBQUM7QUFFTCxNQUFJLGNBQWMsUUFBVztBQUMzQixXQUFPLE1BQU0sU0FBUztBQUFBLEVBQ3hCO0FBRUEsU0FBTyxDQUFDLE9BQU8sS0FBSyxHQUFHLGFBQWEsU0FBUyxDQUFDO0FBQ2hEOyIsCiAgIm5hbWVzIjogW10KfQo=
