import {
  FIELDS_PREFIX
} from "./CW62CVAP.chunk.js";

// packages/react-provider/index.ts
import React from "react";
function simpleReactProvider(prop) {
  try {
    React.useId();
  } catch (error) {
    return this[`${FIELDS_PREFIX}data`][prop];
  }
  const useSync = React.useSyncExternalStore;
  if (!useSync) {
    return this[`${FIELDS_PREFIX}data`][prop];
  }
  const state = useSync(
    (notify) => {
      try {
        const currentProp = prop;
        if (this[`${FIELDS_PREFIX}listeners`][currentProp] && typeof this[`${FIELDS_PREFIX}listeners`][currentProp].set === "function") {
          this[`${FIELDS_PREFIX}listeners`][currentProp].set(notify, notify);
        }
        if (this[`${FIELDS_PREFIX}criticalFields`] && typeof this[`${FIELDS_PREFIX}criticalFields`].set === "function") {
          this[`${FIELDS_PREFIX}criticalFields`].set(notify, [currentProp]);
        }
        if (this[`${FIELDS_PREFIX}muppet`] && typeof this[`${FIELDS_PREFIX}muppet`].set === "function") {
          this[`${FIELDS_PREFIX}muppet`].set(notify, true);
        }
      } catch (err) {
        console.error("Error during subscribe:", err, prop);
      }
      return () => {
        try {
          this[`${FIELDS_PREFIX}muppet`]?.set(notify, false);
          const fields = this[`${FIELDS_PREFIX}criticalFields`]?.get(notify);
          if (fields) {
            fields.forEach((p) => {
              this[`${FIELDS_PREFIX}listeners`][p]?.delete(notify);
            });
          }
          this[`${FIELDS_PREFIX}criticalFields`]?.delete(notify);
          this[`${FIELDS_PREFIX}muppet`]?.delete(notify);
        } catch (err) {
          console.error("Error during unsubscribe:", err);
        }
      };
    },
    () => {
      try {
        return this[`${FIELDS_PREFIX}data`];
      } catch (error) {
        return {};
      }
    },
    () => {
      try {
        return this[`${FIELDS_PREFIX}data`];
      } catch (error) {
        return {};
      }
    }
  );
  return state ? state[prop] : this[`${FIELDS_PREFIX}data`][prop];
}

export {
  simpleReactProvider
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcGFja2FnZXMvcmVhY3QtcHJvdmlkZXIvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGSUVMRFNfUFJFRklYIH0gZnJvbSAnY29yZS9kb21haW4nO1xuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlUmVhY3RQcm92aWRlcjxUIGV4dGVuZHMgb2JqZWN0Pihwcm9wOiBrZXlvZiBUKTogVFtrZXlvZiBUXSB7XG4gIC8vIGlmICghUmVhY3QuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ/LlJlYWN0Q3VycmVudERpc3BhdGNoZXI/LmN1cnJlbnQpIHtcbiAgLy8gICByZXR1cm4gdGhpc1tgJHtGSUVMRFNfUFJFRklYfWRhdGFgXVtwcm9wXTtcbiAgLy8gfVxuXG4gIHRyeSB7XG4gICAgUmVhY3QudXNlSWQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdGhpc1tgJHtGSUVMRFNfUFJFRklYfWRhdGFgXVtwcm9wXTtcbiAgfVxuXG4gIGNvbnN0IHVzZVN5bmMgPSBSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZTtcbiAgaWYgKCF1c2VTeW5jKSB7XG4gICAgcmV0dXJuIHRoaXNbYCR7RklFTERTX1BSRUZJWH1kYXRhYF1bcHJvcF07XG4gIH1cblxuICBjb25zdCBzdGF0ZSA9IHVzZVN5bmMoXG4gICAgKG5vdGlmeSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3VycmVudFByb3AgPSBwcm9wO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bY3VycmVudFByb3BdICYmXG4gICAgICAgICAgdHlwZW9mIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtjdXJyZW50UHJvcF0uc2V0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtjdXJyZW50UHJvcF0uc2V0KG5vdGlmeSwgbm90aWZ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXSAmJlxuICAgICAgICAgIHR5cGVvZiB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXS5zZXQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF0uc2V0KG5vdGlmeSwgW2N1cnJlbnRQcm9wXSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0gJiZcbiAgICAgICAgICB0eXBlb2YgdGhpc1tgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdLnNldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0uc2V0KG5vdGlmeSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZHVyaW5nIHN1YnNjcmliZTpcIiwgZXJyLCBwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0/LnNldChub3RpZnksIGZhbHNlKTtcblxuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdPy5nZXQobm90aWZ5KTtcbiAgICAgICAgICBpZiAoZmllbGRzKSB7XG4gICAgICAgICAgICBmaWVsZHMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3BdPy5kZWxldGUobm90aWZ5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdPy5kZWxldGUobm90aWZ5KTtcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF0/LmRlbGV0ZShub3RpZnkpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZHVyaW5nIHVuc3Vic2NyaWJlOlwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXNbYCR7RklFTERTX1BSRUZJWH1kYXRhYF07XG4gICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByZXR1cm4gc3RhdGUgPyBzdGF0ZVtwcm9wXSA6IHRoaXNbYCR7RklFTERTX1BSRUZJWH1kYXRhYF1bcHJvcF07XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7OztBQUFBLE9BQU8sV0FBVztBQUdYLFNBQVMsb0JBQXNDLE1BQTJCO0FBSy9FLE1BQUk7QUFDRixVQUFNLE1BQU07QUFBQSxFQUNkLFNBQVMsT0FBTztBQUNkLFdBQU8sS0FBSyxHQUFHLGFBQWEsTUFBTSxFQUFFLElBQUk7QUFBQSxFQUMxQztBQUVBLFFBQU0sVUFBVSxNQUFNO0FBQ3RCLE1BQUksQ0FBQyxTQUFTO0FBQ1osV0FBTyxLQUFLLEdBQUcsYUFBYSxNQUFNLEVBQUUsSUFBSTtBQUFBLEVBQzFDO0FBRUEsUUFBTSxRQUFRO0FBQUEsSUFDWixDQUFDLFdBQVc7QUFDVixVQUFJO0FBQ0YsY0FBTSxjQUFjO0FBRXBCLFlBQ0UsS0FBSyxHQUFHLGFBQWEsV0FBVyxFQUFFLFdBQVcsS0FDN0MsT0FBTyxLQUFLLEdBQUcsYUFBYSxXQUFXLEVBQUUsV0FBVyxFQUFFLFFBQVEsWUFDOUQ7QUFDQSxlQUFLLEdBQUcsYUFBYSxXQUFXLEVBQUUsV0FBVyxFQUFFLElBQUksUUFBUSxNQUFNO0FBQUEsUUFDbkU7QUFFQSxZQUNFLEtBQUssR0FBRyxhQUFhLGdCQUFnQixLQUNyQyxPQUFPLEtBQUssR0FBRyxhQUFhLGdCQUFnQixFQUFFLFFBQVEsWUFDdEQ7QUFDQSxlQUFLLEdBQUcsYUFBYSxnQkFBZ0IsRUFBRSxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUM7QUFBQSxRQUNsRTtBQUVBLFlBQ0UsS0FBSyxHQUFHLGFBQWEsUUFBUSxLQUM3QixPQUFPLEtBQUssR0FBRyxhQUFhLFFBQVEsRUFBRSxRQUFRLFlBQzlDO0FBQ0EsZUFBSyxHQUFHLGFBQWEsUUFBUSxFQUFFLElBQUksUUFBUSxJQUFJO0FBQUEsUUFDakQ7QUFBQSxNQUNGLFNBQVMsS0FBSztBQUNaLGdCQUFRLE1BQU0sMkJBQTJCLEtBQUssSUFBSTtBQUFBLE1BQ3BEO0FBRUEsYUFBTyxNQUFNO0FBQ1gsWUFBSTtBQUNGLGVBQUssR0FBRyxhQUFhLFFBQVEsR0FBRyxJQUFJLFFBQVEsS0FBSztBQUVqRCxnQkFBTSxTQUFTLEtBQUssR0FBRyxhQUFhLGdCQUFnQixHQUFHLElBQUksTUFBTTtBQUNqRSxjQUFJLFFBQVE7QUFDVixtQkFBTyxRQUFRLE9BQUs7QUFDbEIsbUJBQUssR0FBRyxhQUFhLFdBQVcsRUFBRSxDQUFDLEdBQUcsT0FBTyxNQUFNO0FBQUEsWUFDckQsQ0FBQztBQUFBLFVBQ0g7QUFFQSxlQUFLLEdBQUcsYUFBYSxnQkFBZ0IsR0FBRyxPQUFPLE1BQU07QUFDckQsZUFBSyxHQUFHLGFBQWEsUUFBUSxHQUFHLE9BQU8sTUFBTTtBQUFBLFFBQy9DLFNBQVMsS0FBSztBQUNaLGtCQUFRLE1BQU0sNkJBQTZCLEdBQUc7QUFBQSxRQUNoRDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxNQUFNO0FBQ0osVUFBSTtBQUNGLGVBQU8sS0FBSyxHQUFHLGFBQWEsTUFBTTtBQUFBLE1BQ3BDLFNBQVEsT0FBTztBQUNiLGVBQU8sQ0FBQztBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxNQUFNO0FBQ0osVUFBSTtBQUNGLGVBQU8sS0FBSyxHQUFHLGFBQWEsTUFBTTtBQUFBLE1BQ3BDLFNBQVMsT0FBTztBQUNkLGVBQU8sQ0FBQztBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLFNBQU8sUUFBUSxNQUFNLElBQUksSUFBSSxLQUFLLEdBQUcsYUFBYSxNQUFNLEVBQUUsSUFBSTtBQUNoRTsiLAogICJuYW1lcyI6IFtdCn0K
