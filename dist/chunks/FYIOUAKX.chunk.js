import {
  Callable,
  FIELDS_PREFIX,
  SPECIAL_KEY
} from "./CW62CVAP.chunk.js";

// packages/core/index.ts
function get(obj, prop, receiver) {
  if (obj[`${FIELDS_PREFIX}muppet`].get(SPECIAL_KEY) && prop !== obj[`${FIELDS_PREFIX}muppet`].get(SPECIAL_KEY) && (typeof prop === "string" && !prop.startsWith(FIELDS_PREFIX)) && !obj[`${FIELDS_PREFIX}methods`][prop]) {
    const currentKey = obj[`${FIELDS_PREFIX}muppet`].get(SPECIAL_KEY);
    obj[`${FIELDS_PREFIX}muppet`].set(currentKey, false);
    const currentFields = obj[`${FIELDS_PREFIX}criticalFields`].get(currentKey) || [];
    obj[`${FIELDS_PREFIX}criticalFields`].set(currentKey, [.../* @__PURE__ */ new Set([
      ...currentFields,
      prop
    ])]);
  }
  if (typeof prop === "string" && prop.startsWith(FIELDS_PREFIX) || prop === "__call") {
    return obj[prop];
  }
  if (obj[`${FIELDS_PREFIX}methods`][prop]) return obj[`${FIELDS_PREFIX}methods`][prop];
  if (obj[`${FIELDS_PREFIX}getter`]) return obj[`${FIELDS_PREFIX}getter`](prop);
  return obj[`${FIELDS_PREFIX}data`][prop];
}
var set = (obj, prop, value) => {
  if (typeof prop === "string" && prop.startsWith(FIELDS_PREFIX) || prop === "__call") {
    obj[prop] = value;
    return true;
  }
  if (!obj[`${FIELDS_PREFIX}methods`][prop]) {
    obj[`${FIELDS_PREFIX}data`] = {
      ...obj[`${FIELDS_PREFIX}data`],
      [prop]: value
    };
    if (obj[`${FIELDS_PREFIX}listeners`][prop] && obj[`${FIELDS_PREFIX}listeners`][prop].size) {
      obj[`${FIELDS_PREFIX}listeners`][prop].forEach((notify, key) => {
        if (obj[`${FIELDS_PREFIX}muppet`].has(key) && obj[`${FIELDS_PREFIX}muppet`].get(key) === false) {
          obj[`${FIELDS_PREFIX}muppet`].set(key, true);
        }
        notify();
      });
    }
    if (obj[`${FIELDS_PREFIX}onUpdate`].length) {
      obj[`${FIELDS_PREFIX}onUpdate`].forEach((fn) => fn && fn(prop));
    }
  }
  return true;
};
function getAllMethodNames(toCheck) {
  const props = [];
  let obj = toCheck;
  do {
    props.push(...Object.getOwnPropertyNames(obj));
  } while (obj = Object.getPrototypeOf(obj));
  return props.sort().filter((e, i, arr) => {
    if (e != arr[i + 1] && typeof toCheck[e] == "function") return true;
  });
}
var createSource = (data, { main, getter }) => {
  try {
    const dummyImplementation = (() => {
    });
    const callableObj = new Callable(dummyImplementation);
    const methodsKeys = new Set(
      getAllMethodNames(data).filter(
        (key) => key !== "constructor" && typeof data[key] === "function" ? true : false
      )
    );
    const obj = Object.keys(data).reduce((acc, key) => {
      if (methodsKeys.has(key)) return acc;
      acc[key] = data[key];
      return acc;
    }, callableObj);
    const proxy = new Proxy(obj, { set, get: get.bind(void 0) });
    const methods = [...methodsKeys].reduce(
      (prev, curr) => curr !== "constructor" && typeof data[curr] === "function" ? { ...prev, [curr]: data[curr].bind(proxy) } : prev,
      {}
    );
    proxy[`${FIELDS_PREFIX}methods`] = methods;
    proxy[`${FIELDS_PREFIX}onUpdate`] = [];
    proxy[`${FIELDS_PREFIX}data`] = data;
    proxy[`${FIELDS_PREFIX}criticalFields`] = /* @__PURE__ */ new Map();
    proxy[`${FIELDS_PREFIX}muppet`] = /* @__PURE__ */ new Map();
    proxy[`${FIELDS_PREFIX}listeners`] = Object.keys(obj).reduce(
      (prev, key) => !key.startsWith(FIELDS_PREFIX) && key !== "__call" ? { ...prev, [key]: /* @__PURE__ */ new Map() } : prev,
      {}
    );
    if (getter) {
      proxy[`${FIELDS_PREFIX}getter`] = getter.bind(proxy);
    }
    if (main) {
      proxy.__call = main.bind(proxy);
    }
    return proxy;
  } catch (error) {
    console.error("SOURCE OBJECT ERROR: ", error);
  }
};

export {
  createSource
};
//# sourceMappingURL=data:application/json;base64,
