import {
  FIELDS_PREFIX
} from "../chunks/CW62CVAP.chunk.js";

// packages/core/legacy.ts
var Callable = class extends Function {
  constructor() {
    super();
    let closure = void 0;
    closure = (...args) => {
      return closure.__call(...args);
    };
    return Object.setPrototypeOf(closure, new.target.prototype);
  }
};
var SPECIAL_KEY = "__PROVIDER_ID__";
var FIELDS_PREFIX2 = "__REPO__";
var get = (obj, prop) => {
  if (obj[`${FIELDS_PREFIX2}muppet`][SPECIAL_KEY] && prop !== obj[`${FIELDS_PREFIX2}muppet`][SPECIAL_KEY] && (typeof prop === "string" && !prop.startsWith(FIELDS_PREFIX2))) {
    obj[`${FIELDS_PREFIX2}muppet`][obj[`${FIELDS_PREFIX2}muppet`][SPECIAL_KEY]] = false;
    obj[`${FIELDS_PREFIX2}criticalFields`][obj[`${FIELDS_PREFIX2}muppet`][SPECIAL_KEY]] = [.../* @__PURE__ */ new Set([
      ...obj[`${FIELDS_PREFIX2}criticalFields`][obj[`${FIELDS_PREFIX2}muppet`][SPECIAL_KEY]] || [],
      prop
    ])];
  }
  if (typeof prop === "string" && prop.startsWith(FIELDS_PREFIX2) || prop === "__call") {
    return obj[prop];
  }
  return obj[`${FIELDS_PREFIX2}data`][prop];
};
var set = (obj, prop, value) => {
  if (typeof prop === "string" && prop.startsWith(FIELDS_PREFIX2) || prop === "__call") {
    obj[prop] = value;
    return true;
  }
  obj[`${FIELDS_PREFIX2}data`] = {
    ...obj[`${FIELDS_PREFIX2}data`],
    [prop]: value
  };
  if (obj[`${FIELDS_PREFIX2}listeners`][prop] && obj[`${FIELDS_PREFIX2}listeners`][prop].size) {
    obj[`${FIELDS_PREFIX2}listeners`][prop].forEach((notify, key) => {
      if (obj[`${FIELDS_PREFIX2}muppet`][key] !== void 0 && obj[`${FIELDS_PREFIX2}muppet`][key] === false) {
        obj[`${FIELDS_PREFIX2}muppet`][key] = true;
      }
      notify();
    });
  }
  if (obj[`${FIELDS_PREFIX2}onUpdate`].length) {
    obj[`${FIELDS_PREFIX2}onUpdate`].forEach((fn) => fn && fn(prop));
  }
  return true;
};
var createSource = (data, methods, provider) => {
  try {
    let defaultProvider = function() {
      return methods ? [this, methods] : this;
    };
    ;
    const callableObj = new Callable();
    if (methods) callableObj[`${FIELDS_PREFIX2}methods`] = methods;
    callableObj[`${FIELDS_PREFIX2}onUpdate`] = [];
    callableObj[`${FIELDS_PREFIX2}data`] = data;
    callableObj[`${FIELDS_PREFIX2}criticalFields`] = {};
    callableObj[`${FIELDS_PREFIX2}muppet`] = {};
    callableObj[`${FIELDS_PREFIX2}listeners`] = Object.keys(data).reduce(
      (prev, key) => ({ ...prev, [key]: /* @__PURE__ */ new Map() }),
      {}
    );
    const proxy = new Proxy(callableObj, { set, get });
    callableObj.__call = (provider || defaultProvider).bind(proxy);
    return proxy;
  } catch (error) {
    console.error("SOURCE OBJECT ERROR: ", error);
  }
};

// packages/watcher/legacy.ts
var Watcher = class {
  constructor() {
    this.SPECIAL_KEY = SPECIAL_KEY;
  }
  init(initObj, options = {}) {
    if (typeof initObj === "object" && !Array.isArray(initObj)) {
      if (options.provider) this.savedProvider = options.provider;
      this.sourceObj = createSource(
        initObj,
        options.methods,
        options.provider || this.savedProvider
      );
    }
    if (options.broadcastName) this.createBroadcast(options.broadcastName);
  }
  createBroadcast(broadcastName = "broadcastWatcher") {
    this.broadcast = new BroadcastChannel(broadcastName);
    this.broadcast.onmessage = ({ data }) => {
      if (data === "needSome") {
        this.broadcast.postMessage({ data: this.get() });
      } else if (data.type === void 0) {
        for (const key in data.data) this.sourceObj[key] = data.data[key];
      } else {
      }
    };
    this.broadcast.postMessage("needSome");
  }
  set(propertyName, value, ignoreBroadcast = false) {
    if (this.sourceObj) {
      this.sourceObj[propertyName] = value;
    }
    if (this.broadcast && !ignoreBroadcast) {
      this.broadcast.postMessage({ type: propertyName, data: value });
    }
  }
  get(propertyName) {
    if (this.sourceObj && propertyName) {
      return this.sourceObj[propertyName];
    } else if (!propertyName) {
      return this.sourceObj[`${FIELDS_PREFIX2}data`];
    }
  }
  watch(propertyName) {
    const index = this.sourceObj[`${FIELDS_PREFIX2}onUpdate`].length;
    return new Promise((resolve) => {
      this.sourceObj[`${FIELDS_PREFIX2}onUpdate`] = [
        ...this.sourceObj[`${FIELDS_PREFIX2}onUpdate`],
        (updatedProperty) => {
          if (propertyName === updatedProperty) {
            resolve(this.sourceObj[propertyName]);
            this.sourceObj[`${FIELDS_PREFIX2}onUpdate`][index] = null;
            if (this.sourceObj[`${FIELDS_PREFIX2}onUpdate`].every((i) => i === null))
              this.sourceObj[`${FIELDS_PREFIX2}onUpdate`] = [];
          }
        }
      ];
    });
  }
  watchFor(propertyName, neededValue) {
    const index = this.sourceObj[`${FIELDS_PREFIX2}onUpdate`].length;
    return new Promise((resolve) => {
      this.sourceObj[`${FIELDS_PREFIX2}onUpdate`] = [
        ...this.sourceObj[`${FIELDS_PREFIX2}onUpdate`],
        (updatedProperty) => {
          if (propertyName === updatedProperty && this.sourceObj[propertyName] === neededValue) {
            resolve(this.sourceObj[propertyName]);
            this.sourceObj[`${FIELDS_PREFIX2}onUpdate`][index] = null;
            if (this.sourceObj[`${FIELDS_PREFIX2}onUpdate`].every((i) => i === null))
              this.sourceObj[`${FIELDS_PREFIX2}onUpdate`] = [];
          }
        }
      ];
    });
  }
};
var watcherCreator = (obj, provider, methods, broadcastName) => {
  const watcher = new Watcher();
  watcher.init(obj, { provider, methods, broadcastName });
  return watcher;
};

// packages/repka/repository.ts
var RepositoryService = class extends Function {
  initializeState(data, options) {
  }
  constructor() {
    super();
    let closure = void 0;
    closure = (...args) => {
      return closure.__call(...args);
    };
    return Object.setPrototypeOf(closure, new.target.prototype);
  }
};
var initRepository = function(repo, options = {}) {
  const keys = Object.keys(repo || {});
  const withOnUpdate = keys.reduce((prev, curr) => {
    let value;
    if (options.prevActions !== void 0 && options.prevActions.get(curr) !== void 0) {
      value = options.prevActions.get(curr);
    } else if (repo) {
      value = repo[curr];
    }
    return { ...prev, [curr]: value };
  }, repo || {});
  return watcherCreator(
    withOnUpdate,
    options.provider,
    options.methods
  );
};
var initializeState = function(data, options = {}) {
  if (!options.prevActions) options.prevActions = this?.actions;
  if (!options.provider) options.provider = this?.actions?.savedProvider;
  const newActions = initRepository.call(this, data, options);
  this.actions = newActions;
};
function getAllMethodNames(toCheck) {
  const props = [];
  let obj = toCheck;
  do {
    props.push(...Object.getOwnPropertyNames(obj));
  } while (obj = Object.getPrototypeOf(obj));
  return props.sort().filter((e, i, arr) => {
    if (e != arr[i + 1] && typeof toCheck[e] == "function") return true;
  });
}
function repositoryCreator(defaultObject, controller, { provider } = {}) {
  let methods;
  let repo = null;
  if (controller) {
    const constructorKeys = getAllMethodNames(controller);
    methods = constructorKeys.reduce(
      (prev, curr) => curr !== "constructor" && typeof controller[curr] === "function" ? { ...prev, [curr]: controller[curr].bind(controller) } : prev,
      {}
    );
    const prevActions = controller.repo?.actions;
    controller.repo = new RepositoryService();
    controller.repo.initRepository = initRepository;
    controller.repo.initializeState = initializeState;
    controller.repo.initializeState(
      prevActions ? { ...prevActions.get(), ...defaultObject } : defaultObject,
      { methods, prevActions, provider: provider || prevActions?.savedProvider || this?.actions?.savedProvider }
    );
  } else {
    repo = initRepository(
      defaultObject,
      { provider: provider || this?.actions?.savedProvider, methods }
    );
  }
  return (repo || controller?.repo?.actions || {}).sourceObj;
}

// packages/react-provider/legacy.ts
import React from "react";
function reactProvider(parameter) {
  let useSync;
  let key = React.useId ? React.useId() : React.useRef(parseInt(String(Math.random() * 1e7), 10).toString()).current;
  if (React.useId) {
    useSync = React.useSyncExternalStore;
  }
  const state = useSync((notify) => {
    if (this[`${FIELDS_PREFIX}criticalFields`][key]) {
      this[`${FIELDS_PREFIX}criticalFields`][key].forEach((prop) => {
        if (this[`${FIELDS_PREFIX}listeners`][prop] && typeof this[`${FIELDS_PREFIX}listeners`][prop] !== "function") this[`${FIELDS_PREFIX}listeners`][prop].set(key, notify);
      });
    }
    return () => {
      if (this[`${FIELDS_PREFIX}criticalFields`][key]) {
        this[`${FIELDS_PREFIX}muppet`][key] = false;
        this[`${FIELDS_PREFIX}criticalFields`][key].forEach((prop) => {
          if (this[`${FIELDS_PREFIX}listeners`][prop] && typeof this[`${FIELDS_PREFIX}listeners`][prop] !== "function") {
            this[`${FIELDS_PREFIX}listeners`][prop].delete(key);
          }
        });
      }
    };
  }, () => {
    this[`${FIELDS_PREFIX}muppet`]["__PROVIDER_ID__"] = key;
    if (this[`${FIELDS_PREFIX}muppet`][key] === true) {
      this[`${FIELDS_PREFIX}muppet`]["__PROVIDER_ID__"] = void 0;
      return this[`${FIELDS_PREFIX}data`];
    }
    return this;
  });
  React.useEffect(() => {
    return () => {
      if (this[`${FIELDS_PREFIX}muppet`][key] && this[`${FIELDS_PREFIX}criticalFields`][key]) {
        this[`${FIELDS_PREFIX}criticalFields`][key].forEach((prop) => {
          if (this[`${FIELDS_PREFIX}listeners`][prop] && typeof this[`${FIELDS_PREFIX}listeners`][prop] !== "function") this[`${FIELDS_PREFIX}listeners`][prop].delete(key);
        });
        delete this[`${FIELDS_PREFIX}criticalFields`][key];
        delete this[`${FIELDS_PREFIX}muppet`][key];
      }
    };
  }, []);
  if (parameter !== void 0) {
    return state[parameter];
  }
  return [state, this[`${FIELDS_PREFIX}methods`]];
}

// packages/legacy/index.ts
var repka = new RepositoryService();
repka.initRepository = initRepository;
repka.initializeState = initializeState;
repka.actions = initRepository({}, { provider: reactProvider });
repka.__call = repositoryCreator;
export {
  repka
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcGFja2FnZXMvY29yZS9sZWdhY3kudHMiLCAiLi4vLi4vcGFja2FnZXMvd2F0Y2hlci9sZWdhY3kudHMiLCAiLi4vLi4vcGFja2FnZXMvcmVwa2EvcmVwb3NpdG9yeS50cyIsICIuLi8uLi9wYWNrYWdlcy9yZWFjdC1wcm92aWRlci9sZWdhY3kudHMiLCAiLi4vLi4vcGFja2FnZXMvbGVnYWN5L2luZGV4LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgdHlwZSBwcm92aWRlclR5cGU8RGF0YVR5cGUgPSB1bmRlZmluZWQsIE1ldGhvZHNPYmpUeXBlID0gdW5kZWZpbmVkPiA9ICgpID0+IFxuICAoTWV0aG9kc09ialR5cGUgZXh0ZW5kcyBvYmplY3QgPyBbRGF0YVR5cGUsIE1ldGhvZHNPYmpUeXBlXSA6IERhdGFUeXBlKTtcblxuZXhwb3J0IGNsYXNzIENhbGxhYmxlPFQgZXh0ZW5kcyBbXT4gZXh0ZW5kcyBGdW5jdGlvbiB7XG4gIF9fY2FsbDogRnVuY3Rpb25cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBsZXQgY2xvc3VyZSA9IHVuZGVmaW5lZDtcbiAgICBjbG9zdXJlID0gKC4uLmFyZ3M6IFQpID0+IHsgXG4gICAgICByZXR1cm4gY2xvc3VyZS5fX2NhbGwoLi4uYXJncyk7IFxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihjbG9zdXJlLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFNQRUNJQUxfS0VZID0gJ19fUFJPVklERVJfSURfXyc7XG5leHBvcnQgY29uc3QgRklFTERTX1BSRUZJWCA9ICdfX1JFUE9fXydcblxuY29uc3QgZ2V0ID0gKG9iaiwgcHJvcCkgPT4ge1xuICBpZiAoXG4gICAgb2JqW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF1bU1BFQ0lBTF9LRVldIFxuICAgICYmIHByb3AgIT09IG9ialtgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW1NQRUNJQUxfS0VZXVxuICAgICYmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgIXByb3Auc3RhcnRzV2l0aChGSUVMRFNfUFJFRklYKSkgXG4gICkge1xuICAgIG9ialtgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW29ialtgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW1NQRUNJQUxfS0VZXV0gPSBmYWxzZTtcbiAgICBvYmpbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdW29ialtgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW1NQRUNJQUxfS0VZXV0gPSBbLi4ubmV3IFNldChbXG4gICAgICAuLi4ob2JqW2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXVtvYmpbYCR7RklFTERTX1BSRUZJWH1tdXBwZXRgXVtTUEVDSUFMX0tFWV1dIHx8IFtdKSxcbiAgICAgIHByb3BcbiAgICBdKV07XG4gIH1cbiAgaWYgKCh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgcHJvcC5zdGFydHNXaXRoKEZJRUxEU19QUkVGSVgpKSB8fCBwcm9wID09PSAnX19jYWxsJykge1xuICAgIHJldHVybiBvYmpbcHJvcF1cbiAgfVxuXG4gIHJldHVybiBvYmpbYCR7RklFTERTX1BSRUZJWH1kYXRhYF1bcHJvcF07XG59XG5cbmNvbnN0IHNldCA9IChvYmosIHByb3AsIHZhbHVlKTogYm9vbGVhbiA9PiB7XG4gIGlmICgodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnICYmIHByb3Auc3RhcnRzV2l0aChGSUVMRFNfUFJFRklYKSkgfHwgcHJvcCA9PT0gJ19fY2FsbCcpIHtcbiAgICBvYmpbcHJvcF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBcblxuICBvYmpbYCR7RklFTERTX1BSRUZJWH1kYXRhYF0gPSB7XG4gICAgLi4ub2JqW2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdLFxuICAgIFtwcm9wXTogdmFsdWVcbiAgfTtcblxuICBpZiAob2JqW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bcHJvcF0gJiYgb2JqW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bcHJvcF0uc2l6ZSkge1xuICAgIG9ialtgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdLmZvckVhY2goKG5vdGlmeSwga2V5KSA9PiB7XG4gICAgICBpZiAob2JqW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF1ba2V5XSAhPT0gdW5kZWZpbmVkIFxuICAgICAgICAmJiBvYmpbYCR7RklFTERTX1BSRUZJWH1tdXBwZXRgXVtrZXldID09PSBmYWxzZSkgeyBcbiAgICAgICAgb2JqW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF1ba2V5XSA9IHRydWU7IFxuICAgICAgfVxuXG4gICAgICBub3RpZnkoKTtcbiAgICB9KTtcbiAgfVxuICBpZiAob2JqW2Ake0ZJRUxEU19QUkVGSVh9b25VcGRhdGVgXS5sZW5ndGgpIHtcbiAgICBvYmpbYCR7RklFTERTX1BSRUZJWH1vblVwZGF0ZWBdLmZvckVhY2goKGZuOiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB2b2lkKSA9PiBmbiAmJiBmbihwcm9wKSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU291cmNlPFQ+IHtcbiAgPFxuICAgIERhdGFUeXBlID0gVCxcbiAgICBNZXRob2RzT2JqVHlwZSA9IHVuZGVmaW5lZFxuICA+KFxuICAgIGRhdGE6IERhdGFUeXBlLFxuICAgIG1ldGhvZHM/OiBNZXRob2RzT2JqVHlwZSxcbiAgICBwcm92aWRlcj86IHByb3ZpZGVyVHlwZTxEYXRhVHlwZSwgTWV0aG9kc09ialR5cGU+LFxuICApOiAoKCkgPT4gW0RhdGFUeXBlLCBPbWl0PE1ldGhvZHNPYmpUeXBlLCAncmVwbyc+XSkgJiBEYXRhVHlwZTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNvdXJjZSA9IDxcbiAgRGF0YVR5cGUgPSB1bmtub3duLFxuICBNZXRob2RzT2JqVHlwZSA9IHVuZGVmaW5lZFxuPihcbiAgZGF0YTogRGF0YVR5cGUsXG4gIG1ldGhvZHM/OiBNZXRob2RzT2JqVHlwZSxcbiAgcHJvdmlkZXI/OiBwcm92aWRlclR5cGU8RGF0YVR5cGUsIE1ldGhvZHNPYmpUeXBlPixcbik6IElTb3VyY2U8RGF0YVR5cGU+ID0+IHtcbiAgdHJ5IHtcbiAgICBmdW5jdGlvbiBkZWZhdWx0UHJvdmlkZXIoKSB7XG4gICAgICByZXR1cm4gbWV0aG9kcyA/IFt0aGlzLCBtZXRob2RzXSA6IHRoaXM7XG4gICAgfTtcbiAgICBjb25zdCBjYWxsYWJsZU9iaiA9IG5ldyBDYWxsYWJsZSgpO1xuXG4gICAgaWYgKG1ldGhvZHMpIGNhbGxhYmxlT2JqW2Ake0ZJRUxEU19QUkVGSVh9bWV0aG9kc2BdID0gbWV0aG9kcztcblxuICAgIGNhbGxhYmxlT2JqW2Ake0ZJRUxEU19QUkVGSVh9b25VcGRhdGVgXSA9IFtdO1xuICAgIGNhbGxhYmxlT2JqW2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdID0gZGF0YTtcbiAgICBjYWxsYWJsZU9ialtgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF0gPSB7fTtcbiAgICBjYWxsYWJsZU9ialtgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdID0ge307XG4gICAgY2FsbGFibGVPYmpbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXSA9IE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZShcbiAgICAgIChwcmV2LCBrZXkpID0+ICh7IC4uLnByZXYsIFtrZXldOiBuZXcgTWFwKCkgfSksIHt9XG4gICAgKTtcblxuICAgIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KGNhbGxhYmxlT2JqLCB7IHNldCwgZ2V0IH0pO1xuICAgIGNhbGxhYmxlT2JqLl9fY2FsbCA9IChwcm92aWRlciB8fCBkZWZhdWx0UHJvdmlkZXIpLmJpbmQocHJveHkpO1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1NPVVJDRSBPQkpFQ1QgRVJST1I6ICcsIGVycm9yKTtcbiAgfVxufTtcbiIsICJpbXBvcnQgeyBwcm92aWRlclR5cGUsIFNQRUNJQUxfS0VZLCBGSUVMRFNfUFJFRklYLCBjcmVhdGVTb3VyY2UgfSBmcm9tICdjb3JlL2xlZ2FjeSc7XG5cbmV4cG9ydCB0eXBlIGJhc2VTb3VyY2VPYmpUeXBlPFQ+ID0ge1xuICBba2V5OiBzdHJpbmddOiBULFxufTtcblxuZXhwb3J0IHR5cGUgc3BlY2lhbEtleUxpdGVyYWxUeXBlID0gXCJfX1BST1ZJREVSX0lEX19cIjtcblxuZXhwb3J0IHR5cGUgcHJveHlIYW5kbGVyVHlwZTxUPiA9IHtcbiAgc2V0OiAoXG4gICAgb2JqOiBUICYgeyBvblVwZGF0ZTogKCguLi5hcmdzOiBhbnkpID0+IHZvaWQpW10gfSxcbiAgICBwcm9wOiBzdHJpbmcsXG4gICAgdmFsdWU6IFRcbiAgKSA9PiBib29sZWFuXG4gIGdldD86IChcbiAgICBvYmo6IFQgJiB7IG9uVXBkYXRlOiAoKC4uLmFyZ3M6IGFueSkgPT4gdm9pZClbXSB9LFxuICAgIHByb3A6IHN0cmluZyxcbiAgKSA9PiB1bmtub3duXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElXYXRjaGVyPFxuICBUID0geyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0sXG4gIE0gPSB1bmRlZmluZWQsXG4gIFAgPSB1bmtub3duXG4+IHtcbiAgc291cmNlT2JqOiBUICYgKFAgfCBwcm92aWRlclR5cGU8VCwgTT4pO1xuICBzYXZlZFByb3ZpZGVyPzogUDtcbiAgU1BFQ0lBTF9LRVk6IHNwZWNpYWxLZXlMaXRlcmFsVHlwZTtcbiAgYnJvYWRjYXN0OiBhbnk7XG5cbiAgaW5pdChcbiAgICBpbml0T2JqOiBULFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHByb3ZpZGVyPzogcHJvdmlkZXJUeXBlLFxuICAgICAgbWV0aG9kcz86IE0sXG4gICAgICBicm9hZGNhc3ROYW1lPzogc3RyaW5nXG4gICAgfVxuICApOiB2b2lkO1xuXG4gIHNldChcbiAgICBwcm9wZXJ0eU5hbWU6IGtleW9mIChUKSwgXG4gICAgdmFsdWU6IChUICYgcHJvdmlkZXJUeXBlPFQsIE0+KVtrZXlvZiAoVCldLFxuICAgIGlnbm9yZUJyb2FkY2FzdD86IGJvb2xlYW5cbiAgKTogdm9pZDtcbiAgZ2V0KFxuICAgIHByb3BlcnR5TmFtZT86IGtleW9mIChUKVxuICApOiAoVClba2V5b2YgVF0gfCBUO1xuXG4gIGNyZWF0ZUJyb2FkY2FzdChicm9hZGNhc3ROYW1lOiBzdHJpbmcpOiB2b2lkO1xuICB3YXRjaChmaWVsZE5hbWU6IHN0cmluZyk6IFByb21pc2U8VD47XG4gIHdhdGNoRm9yKGZpZWxkTmFtZTogc3RyaW5nLCBuZWVkZWRWYWx1ZTogdW5rbm93bik6IFByb21pc2U8VD47XG59XG5cbmV4cG9ydCB0eXBlIHdhdGNoZXJDcmVhdG9yVHlwZSA9IDxULCBNPihcbiAgb2JqOiBULFxuICBwcm92aWRlcj86IHByb3ZpZGVyVHlwZSxcbiAgbWV0aG9kcz86IE0sXG4gIGJyb2FkY2FzdE5hbWU/OiBzdHJpbmdcbikgPT4gV2F0Y2hlcjxULCBNPjtcblxuZXhwb3J0IGNsYXNzIFdhdGNoZXI8VCA9IHtba2V5OiBzdHJpbmddOiB1bmtub3dufSwgTSA9IHVuZGVmaW5lZCwgUCA9IHVua25vd24+IGltcGxlbWVudHMgSVdhdGNoZXI8VCwgTSwgUD4ge1xuICBzYXZlZFByb3ZpZGVyOiBQO1xuICBzb3VyY2VPYmo6IFQgJiAoUCB8IHByb3ZpZGVyVHlwZTxULCBNPik7XG4gIFNQRUNJQUxfS0VZOiBzcGVjaWFsS2V5TGl0ZXJhbFR5cGUgPSBTUEVDSUFMX0tFWTtcbiAgYnJvYWRjYXN0OiBhbnk7XG5cbiAgaW5pdChcbiAgICBpbml0T2JqOiBULFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHByb3ZpZGVyPzogYW55LFxuICAgICAgbWV0aG9kcz86IE0sXG4gICAgICBicm9hZGNhc3ROYW1lPzogc3RyaW5nXG4gICAgfSA9IHt9XG4gICk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgaW5pdE9iaiA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdE9iaikpIHtcbiAgICAgIGlmIChvcHRpb25zLnByb3ZpZGVyKSB0aGlzLnNhdmVkUHJvdmlkZXIgPSBvcHRpb25zLnByb3ZpZGVyO1xuICAgICAgdGhpcy5zb3VyY2VPYmogPSBjcmVhdGVTb3VyY2U8VCwgTT4oXG4gICAgICAgIGluaXRPYmosIFxuICAgICAgICBvcHRpb25zLm1ldGhvZHMsIFxuICAgICAgICBvcHRpb25zLnByb3ZpZGVyIHx8IHRoaXMuc2F2ZWRQcm92aWRlclxuICAgICAgKSBhcyBUICYgKFAgfCBwcm92aWRlclR5cGU8VCwgTT4pO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5icm9hZGNhc3ROYW1lKSB0aGlzLmNyZWF0ZUJyb2FkY2FzdChvcHRpb25zLmJyb2FkY2FzdE5hbWUpO1xuICB9XG5cbiAgY3JlYXRlQnJvYWRjYXN0KGJyb2FkY2FzdE5hbWU6IHN0cmluZyA9ICdicm9hZGNhc3RXYXRjaGVyJyk6IHZvaWQge1xuICAgIHRoaXMuYnJvYWRjYXN0ID0gbmV3IEJyb2FkY2FzdENoYW5uZWwoYnJvYWRjYXN0TmFtZSk7XG5cbiAgICB0aGlzLmJyb2FkY2FzdC5vbm1lc3NhZ2UgPSAoXG4gICAgICB7IGRhdGEgfTogeyBcbiAgICAgICAgZGF0YTogeyBcbiAgICAgICAgICB0eXBlPzoga2V5b2YgKFQpLCBcbiAgICAgICAgICBkYXRhOiBwcm92aWRlclR5cGU8VD4gfCAocHJvdmlkZXJUeXBlPFQ+KVtrZXlvZiAocHJvdmlkZXJUeXBlPFQ+KV0gXG4gICAgICAgIH0gfCAnbmVlZFNvbWUnIFxuICAgICAgfVxuICAgICkgPT4ge1xuICAgICAgaWYgKGRhdGEgPT09ICduZWVkU29tZScpIHtcbiAgICAgICAgdGhpcy5icm9hZGNhc3QucG9zdE1lc3NhZ2UoeyBkYXRhOiB0aGlzLmdldCgpIH0pO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhLmRhdGEpIHRoaXMuc291cmNlT2JqW2tleV0gPSBkYXRhLmRhdGFba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoaXMuc2V0KGRhdGEudHlwZSwgZGF0YS5kYXRhLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5icm9hZGNhc3QucG9zdE1lc3NhZ2UoJ25lZWRTb21lJyk7XG4gIH1cblxuICBwdWJsaWMgc2V0KFxuICAgIHByb3BlcnR5TmFtZToga2V5b2YgKFQpLCBcbiAgICB2YWx1ZTogKFQgJiBwcm92aWRlclR5cGU8VCwgTT4pW2tleW9mIChUKV0sXG4gICAgaWdub3JlQnJvYWRjYXN0ID0gZmFsc2VcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc291cmNlT2JqKSB7XG4gICAgICB0aGlzLnNvdXJjZU9ialtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLmJyb2FkY2FzdCAmJiAhaWdub3JlQnJvYWRjYXN0KSB7XG4gICAgICB0aGlzLmJyb2FkY2FzdC5wb3N0TWVzc2FnZSh7IHR5cGU6IHByb3BlcnR5TmFtZSwgZGF0YTogdmFsdWUgfSk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXQoXG4gICAgcHJvcGVydHlOYW1lPzoga2V5b2YgKFQpXG4gICk6IChUKVtrZXlvZiBUXSB8IFQge1xuICAgIGlmICh0aGlzLnNvdXJjZU9iaiAmJiBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZU9ialtwcm9wZXJ0eU5hbWVdO1xuICAgIH0gZWxzZSBpZiAoIXByb3BlcnR5TmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlT2JqW2Ake0ZJRUxEU19QUkVGSVh9ZGF0YWBdO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB3YXRjaChcbiAgICBwcm9wZXJ0eU5hbWU6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnNvdXJjZU9ialtgJHtGSUVMRFNfUFJFRklYfW9uVXBkYXRlYF0ubGVuZ3RoO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLnNvdXJjZU9ialtgJHtGSUVMRFNfUFJFRklYfW9uVXBkYXRlYF0gPSBbXG4gICAgICAgIC4uLnRoaXMuc291cmNlT2JqW2Ake0ZJRUxEU19QUkVGSVh9b25VcGRhdGVgXSwgXG4gICAgICAgICh1cGRhdGVkUHJvcGVydHkpID0+IHtcbiAgICAgICAgICBpZiAocHJvcGVydHlOYW1lID09PSB1cGRhdGVkUHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5zb3VyY2VPYmpbcHJvcGVydHlOYW1lXSk7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZU9ialtgJHtGSUVMRFNfUFJFRklYfW9uVXBkYXRlYF1baW5kZXhdID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlT2JqW2Ake0ZJRUxEU19QUkVGSVh9b25VcGRhdGVgXS5ldmVyeSgoaSkgPT4gaSA9PT0gIG51bGwpKVxuICAgICAgICAgICAgICB0aGlzLnNvdXJjZU9ialtgJHtGSUVMRFNfUFJFRklYfW9uVXBkYXRlYF0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIHdhdGNoRm9yKFxuICAgIHByb3BlcnR5TmFtZTogc3RyaW5nLFxuICAgIG5lZWRlZFZhbHVlOiBUXG4gICk6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zb3VyY2VPYmpbYCR7RklFTERTX1BSRUZJWH1vblVwZGF0ZWBdLmxlbmd0aDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuc291cmNlT2JqW2Ake0ZJRUxEU19QUkVGSVh9b25VcGRhdGVgXSA9IFtcbiAgICAgICAgLi4udGhpcy5zb3VyY2VPYmpbYCR7RklFTERTX1BSRUZJWH1vblVwZGF0ZWBdLCBcbiAgICAgICAgKHVwZGF0ZWRQcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09IHVwZGF0ZWRQcm9wZXJ0eSBcbiAgICAgICAgICAgICYmIHRoaXMuc291cmNlT2JqW3Byb3BlcnR5TmFtZV0gPT09IG5lZWRlZFZhbHVlKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMuc291cmNlT2JqW3Byb3BlcnR5TmFtZV0pO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VPYmpbYCR7RklFTERTX1BSRUZJWH1vblVwZGF0ZWBdW2luZGV4XSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZU9ialtgJHtGSUVMRFNfUFJFRklYfW9uVXBkYXRlYF0uZXZlcnkoKGkpID0+IGkgPT09ICBudWxsKSkgXG4gICAgICAgICAgICAgIHRoaXMuc291cmNlT2JqW2Ake0ZJRUxEU19QUkVGSVh9b25VcGRhdGVgXSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2F0Y2hlckNyZWF0b3IgPSA8VCwgTSwgUD4oXG4gIG9iajogVCxcbiAgcHJvdmlkZXI/OiBQLFxuICBtZXRob2RzPzogTSxcbiAgYnJvYWRjYXN0TmFtZT86IHN0cmluZ1xuKTogV2F0Y2hlcjxULCBNLCBQPiA9PiB7XG4gIGNvbnN0IHdhdGNoZXIgPSBuZXcgV2F0Y2hlcjxULCBNLCBQPigpO1xuICB3YXRjaGVyLmluaXQob2JqLCB7IHByb3ZpZGVyLCBtZXRob2RzLCBicm9hZGNhc3ROYW1lIH0pO1xuICByZXR1cm4gd2F0Y2hlcjtcbn07XG5cbiIsICJpbXBvcnQgeyBJV2F0Y2hlciwgd2F0Y2hlckNyZWF0b3IgfSBmcm9tICd3YXRjaGVyL2xlZ2FjeSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlcG9zaXRvcnlTZXJ2aWNlIHtcbiAgPFxuICAgIFJlcG9zaXRvcnlQb3J0IGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0sXG4gICAgQ29udHJvbGxlciA9IHVuZGVmaW5lZCxcbiAgICBQcm92aWRlciA9ICgoKCkgPT4gW1JlcG9zaXRvcnlQb3J0LCBPbWl0PENvbnRyb2xsZXIsICdyZXBvJz5dKSAmIFJlcG9zaXRvcnlQb3J0KVxuICA+KFxuICAgIGRlZmF1bHRPYmplY3Q/OiBSZXBvc2l0b3J5UG9ydCxcbiAgICBjb250cm9sbGVyPzogQ29udHJvbGxlciAmIHsgcmVwbz86IElSZXBvc2l0b3J5U2VydmljZSB9LFxuICApOiBQcm92aWRlcjtcblxuICBrZXlzOiBzdHJpbmdbXTtcbiAgYWN0aW9uczogSVdhdGNoZXI8YW55LCBhbnk+O1xuICBpbml0aWFsaXplU3RhdGU8VCwgTT4gKFxuICAgIGRhdGE/OiBULCAgXG4gICAgb3B0aW9ucz86IHsgbWV0aG9kcz86IE0sIHByZXZBY3Rpb25zPzogYW55LCBwcm92aWRlcj86IGFueSB9XG4gICk6IHZvaWQ7XG4gIGluaXRSZXBvc2l0b3J5PzxULCBNLCBQPiAocmVwbz86IFQsIG9wdGlvbnM/OiB7XG4gICAgbWV0aG9kcz86IE0sIHByb3ZpZGVyPzogUCwgcHJldkFjdGlvbnM/OiBhbnlcbiAgfSk6IElXYXRjaGVyPFQsIE0sIFA+O1xuXG4gIF9fY2FsbDogPFxuICAgIFJlcG9zaXRvcnlQb3J0IGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiB1bmtub3duIH0sXG4gICAgQ29udHJvbGxlciA9IHVuZGVmaW5lZCxcbiAgICBQcm92aWRlciA9ICgoKCkgPT4gW1JlcG9zaXRvcnlQb3J0LCBPbWl0PENvbnRyb2xsZXIsICdyZXBvJz5dKSAmIFJlcG9zaXRvcnlQb3J0KVxuICA+KFxuICAgIGRlZmF1bHRPYmplY3Q/OiBSZXBvc2l0b3J5UG9ydCxcbiAgICBjb250cm9sbGVyPzogQ29udHJvbGxlciAmIHsgcmVwbz86IElSZXBvc2l0b3J5U2VydmljZSB9LFxuICApID0+IFByb3ZpZGVyO1xufVxuXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeVNlcnZpY2UgZXh0ZW5kcyBGdW5jdGlvbiB7XG4gIGtleXM6IHN0cmluZ1tdO1xuICBhY3Rpb25zOiBJV2F0Y2hlcjxhbnksIGFueT47XG4gIGluaXRpYWxpemVTdGF0ZTxULCBNLCBQPihcbiAgICBkYXRhPzogVCwgIFxuICAgIG9wdGlvbnM/OiB7IG1ldGhvZHM/OiBNLCBwcmV2QWN0aW9ucz86IGFueSwgcHJvdmlkZXI/OiBQIH1cbiAgKTogdm9pZCB7fTtcbiAgaW5pdFJlcG9zaXRvcnk/PFQsIE0sIFA+IChyZXBvPzogVCwgb3B0aW9ucz86IHtcbiAgICBtZXRob2RzPzogTSwgcHJvdmlkZXI/OiBQLCBwcmV2QWN0aW9ucz86IGFueVxuICB9KTogSVdhdGNoZXI8VCwgTT47XG5cbiAgX19jYWxsOiA8XG4gICAgUmVwb3NpdG9yeVBvcnQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSxcbiAgICBDb250cm9sbGVyID0gdW5kZWZpbmVkLFxuICA+KFxuICAgIGRlZmF1bHRPYmplY3Q/OiBSZXBvc2l0b3J5UG9ydCxcbiAgICBjb250cm9sbGVyPzogQ29udHJvbGxlciAmIHsgcmVwbz86IElSZXBvc2l0b3J5U2VydmljZSB9LFxuICApID0+ICgoYTogYW55KSA9PiBbUmVwb3NpdG9yeVBvcnQsIE9taXQ8Q29udHJvbGxlciwgJ3JlcG8nPl0pICYgUmVwb3NpdG9yeVBvcnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBsZXQgY2xvc3VyZSA9IHVuZGVmaW5lZDtcbiAgICBjbG9zdXJlID0gKC4uLmFyZ3M6IGFueSkgPT4geyBcbiAgICAgIHJldHVybiBjbG9zdXJlLl9fY2FsbCguLi5hcmdzKTsgXG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKGNsb3N1cmUsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgaW5pdFJlcG9Cb3VuZEZ1bmN0aW9uIHtcbiAgICA8VCwgTSwgUCA9IHVuZGVmaW5lZD4ocnA/OiBULCBvcHRpb25zPzoge1xuICAgICAgbWV0aG9kcz86IE0sXG4gICAgICBwcm92aWRlcj86IFAsXG4gICAgICBwcmV2QWN0aW9ucz86IGFueVxuICAgIH0pOiBJV2F0Y2hlcjxULCBNLCBQPjtcbiAgICBjYWxsPFQsIE0+KHRoaXM6IEZ1bmN0aW9uLCAuLi5hcmdBcnJheTogYW55W10pOiBJV2F0Y2hlcjxULCBNPjtcbn1cbmV4cG9ydCBjb25zdCBpbml0UmVwb3NpdG9yeTogaW5pdFJlcG9Cb3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gPFQsIE0sIFA+KFxuICByZXBvOiBULFxuICBvcHRpb25zOiB7XG4gICAgbWV0aG9kcz86IE0sXG4gICAgcHJvdmlkZXI/OiBQLFxuICAgIHByZXZBY3Rpb25zPzogYW55XG4gIH0gPSB7fVxuKTogSVdhdGNoZXI8VCwgTSwgUD4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVwbyB8fCB7fSk7XG5cbiAgY29uc3Qgd2l0aE9uVXBkYXRlOiBUID0ga2V5cy5yZWR1Y2UoKFxuICAgIHByZXY6IFQsIFxuICAgIGN1cnI6IHN0cmluZ1xuICApID0+IHtcbiAgICBsZXQgdmFsdWU6IHVua25vd247XG4gICAgaWYgKG9wdGlvbnMucHJldkFjdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnByZXZBY3Rpb25zLmdldChjdXJyKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnMucHJldkFjdGlvbnMuZ2V0KGN1cnIpO1xuICAgIH0gZWxzZSBpZiAocmVwbykge1xuICAgICAgdmFsdWUgPSByZXBvW2N1cnJdO1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5wcmV2LCBbY3Vycl06IHZhbHVlIH07XG4gIH0sIHJlcG8gfHwge30gYXMgVCk7XG5cbiAgcmV0dXJuIHdhdGNoZXJDcmVhdG9yPFQsIE0sIFA+KFxuICAgIHdpdGhPblVwZGF0ZSwgXG4gICAgb3B0aW9ucy5wcm92aWRlciwgXG4gICAgb3B0aW9ucy5tZXRob2RzXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplU3RhdGUgPSBmdW5jdGlvbjxULCBNPihcbiAgZGF0YT86IFQsIFxuICBvcHRpb25zOiB7IG1ldGhvZHM/OiBNLCBwcmV2QWN0aW9ucz86IGFueSwgcHJvdmlkZXI/OiBhbnkgfSA9IHt9XG4pOiB2b2lkIHtcbiAgaWYgKCFvcHRpb25zLnByZXZBY3Rpb25zKSBvcHRpb25zLnByZXZBY3Rpb25zID0gdGhpcz8uYWN0aW9ucztcbiAgaWYgKCFvcHRpb25zLnByb3ZpZGVyKSBvcHRpb25zLnByb3ZpZGVyID0gdGhpcz8uYWN0aW9ucz8uc2F2ZWRQcm92aWRlcjtcblxuICBjb25zdCBuZXdBY3Rpb25zID0gaW5pdFJlcG9zaXRvcnkuY2FsbDxULCBNPih0aGlzLCBkYXRhLCBvcHRpb25zKTtcbiAgdGhpcy5hY3Rpb25zID0gbmV3QWN0aW9ucztcbn1cblxuZnVuY3Rpb24gZ2V0QWxsTWV0aG9kTmFtZXModG9DaGVjazoge1trZXk6IHN0cmluZ106IHVua25vd259KSB7XG4gIGNvbnN0IHByb3BzID0gW107XG4gIGxldCBvYmogPSB0b0NoZWNrO1xuICBkbyB7XG4gICAgcHJvcHMucHVzaCguLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcbiAgfSB3aGlsZSAob2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpO1xuICBcbiAgcmV0dXJuIHByb3BzLnNvcnQoKS5maWx0ZXIoKGUsIGksIGFycikgPT4geyBcbiAgICBpZiAoZSAhPSBhcnJbaSArIDFdICYmIHR5cGVvZiB0b0NoZWNrW2VdID09ICdmdW5jdGlvbicpIHJldHVybiB0cnVlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9zaXRvcnlDcmVhdG9yPFxuICBSZXBvc2l0b3J5UG9ydCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9LFxuICBDb250cm9sbGVyID0gdW5kZWZpbmVkLFxuICBQcm92aWRlciA9ICgoKCkgPT4gW1JlcG9zaXRvcnlQb3J0LCBPbWl0PENvbnRyb2xsZXIsICdyZXBvJz5dKSAmIFJlcG9zaXRvcnlQb3J0KVxuPihcbiAgZGVmYXVsdE9iamVjdD86IFJlcG9zaXRvcnlQb3J0LFxuICBjb250cm9sbGVyPzogQ29udHJvbGxlciAmIHsgcmVwbz86IElSZXBvc2l0b3J5U2VydmljZSB9LFxuICB7IHByb3ZpZGVyIH06IHtcbiAgICBwcm92aWRlcj86IFByb3ZpZGVyLFxuICAgIGJyb2FkY2FzdE5hbWU/OiBzdHJpbmdcbiAgfSA9IHt9XG4pOiBQcm92aWRlciB7XG4gIGxldCBtZXRob2RzOiBDb250cm9sbGVyO1xuICBsZXQgcmVwbyA9IG51bGw7XG5cbiAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBjb25zdHJ1Y3RvcktleXMgPSBnZXRBbGxNZXRob2ROYW1lcyhjb250cm9sbGVyKTtcblxuICAgIG1ldGhvZHMgPSBjb25zdHJ1Y3RvcktleXMucmVkdWNlKFxuICAgICAgKHByZXYsIGN1cnIpID0+IChjdXJyICE9PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBjb250cm9sbGVyW2N1cnJdID09PSAnZnVuY3Rpb24nKSBcbiAgICAgICAgPyB7IC4uLnByZXYsIFtjdXJyXTogY29udHJvbGxlcltjdXJyXS5iaW5kKGNvbnRyb2xsZXIpIH1cbiAgICAgICAgOiBwcmV2LFxuICAgICAge30gYXMgQ29udHJvbGxlclxuICAgICk7XG5cbiAgICBjb25zdCBwcmV2QWN0aW9ucyA9IGNvbnRyb2xsZXIucmVwbz8uYWN0aW9ucztcbiAgICBjb250cm9sbGVyLnJlcG8gPSBuZXcgUmVwb3NpdG9yeVNlcnZpY2UoKSBhcyBJUmVwb3NpdG9yeVNlcnZpY2U7XG4gICAgY29udHJvbGxlci5yZXBvLmluaXRSZXBvc2l0b3J5ID0gaW5pdFJlcG9zaXRvcnk7XG4gICAgY29udHJvbGxlci5yZXBvLmluaXRpYWxpemVTdGF0ZSA9IGluaXRpYWxpemVTdGF0ZTtcbiAgICBjb250cm9sbGVyLnJlcG8uaW5pdGlhbGl6ZVN0YXRlPFJlcG9zaXRvcnlQb3J0LCBDb250cm9sbGVyPihcbiAgICAgIHByZXZBY3Rpb25zID8geyAuLi5wcmV2QWN0aW9ucy5nZXQoKSwgLi4uZGVmYXVsdE9iamVjdCB9IDogZGVmYXVsdE9iamVjdCxcbiAgICAgIHsgbWV0aG9kcywgcHJldkFjdGlvbnMsIHByb3ZpZGVyOiBwcm92aWRlciB8fCBwcmV2QWN0aW9ucz8uc2F2ZWRQcm92aWRlciB8fCB0aGlzPy5hY3Rpb25zPy5zYXZlZFByb3ZpZGVyIH1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJlcG8gPSBpbml0UmVwb3NpdG9yeTxSZXBvc2l0b3J5UG9ydCwgQ29udHJvbGxlciwgUHJvdmlkZXI+KFxuICAgICAgZGVmYXVsdE9iamVjdCwgXG4gICAgICB7IHByb3ZpZGVyOiBwcm92aWRlciB8fCB0aGlzPy5hY3Rpb25zPy5zYXZlZFByb3ZpZGVyLCBtZXRob2RzIH1cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChyZXBvIHx8IGNvbnRyb2xsZXI/LnJlcG8/LmFjdGlvbnMgfHwge30pLnNvdXJjZU9iajtcbn1cblxuIiwgImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGSUVMRFNfUFJFRklYIH0gZnJvbSAnY29yZS9kb21haW4nO1xuXG5leHBvcnQgdHlwZSByZWFjdFByb3ZpZGVyVHlwZTxULCBNPiA9IChwYXJhbWV0ZXI/OiBrZXlvZiBUKSA9PiBbVCwgTV0gfCBUW2tleW9mIFRdO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVhY3RQcm92aWRlcjxULCBNPihwYXJhbWV0ZXI/OiBrZXlvZiBUKTogW1QsIE1dIHtcbiAgbGV0IHVzZVN5bmM7XG4gIGxldCBrZXkgPSBSZWFjdC51c2VJZCBcbiAgICA/IFJlYWN0LnVzZUlkKClcbiAgICA6IFJlYWN0LnVzZVJlZihwYXJzZUludChTdHJpbmcoKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMCkpLCAxMCkudG9TdHJpbmcoKSkuY3VycmVudFxuXG4gIGlmIChSZWFjdC51c2VJZCkge1xuICAgIHVzZVN5bmMgPSBSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZTtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0gdXNlU3luYyhub3RpZnkgPT4ge1xuICAgIGlmICh0aGlzW2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXVtrZXldKSB7XG4gICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9Y3JpdGljYWxGaWVsZHNgXVtrZXldLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bGlzdGVuZXJzYF1bcHJvcF0gJiZcbiAgICAgICAgICB0eXBlb2YgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICkgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdLnNldChrZXksIG5vdGlmeSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdW2tleV0pIHtcbiAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW2tleV0gPSBmYWxzZTtcbiAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF1ba2V5XS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtwcm9wXSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtwcm9wXSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgKCkgPT4ge1xuICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1tdXBwZXRgXVsnX19QUk9WSURFUl9JRF9fJ10gPSBrZXk7XG5cbiAgICBpZiAodGhpc1tgJHtGSUVMRFNfUFJFRklYfW11cHBldGBdW2tleV0gPT09IHRydWUpIHtcbiAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1tdXBwZXRgXVsnX19QUk9WSURFUl9JRF9fJ10gPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpc1tgJHtGSUVMRFNfUFJFRklYfWRhdGFgXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHRoaXNbYCR7RklFTERTX1BSRUZJWH1tdXBwZXRgXVtrZXldICYmIHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdW2tleV0pIHtcbiAgICAgICAgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWNyaXRpY2FsRmllbGRzYF1ba2V5XS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtwcm9wXSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXNbYCR7RklFTERTX1BSRUZJWH1saXN0ZW5lcnNgXVtwcm9wXSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICkgdGhpc1tgJHtGSUVMRFNfUFJFRklYfWxpc3RlbmVyc2BdW3Byb3BdLmRlbGV0ZShrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgZGVsZXRlIHRoaXNbYCR7RklFTERTX1BSRUZJWH1jcml0aWNhbEZpZWxkc2BdW2tleV07XG4gICAgICAgIGRlbGV0ZSB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bXVwcGV0YF1ba2V5XTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgaWYgKHBhcmFtZXRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHN0YXRlW3BhcmFtZXRlcl07XG4gIH1cblxuICByZXR1cm4gW3N0YXRlLCB0aGlzW2Ake0ZJRUxEU19QUkVGSVh9bWV0aG9kc2BdXTtcbn1cbiIsICJpbXBvcnQgeyBcbiAgSVJlcG9zaXRvcnlTZXJ2aWNlLCBcbiAgUmVwb3NpdG9yeVNlcnZpY2UsIFxuICByZXBvc2l0b3J5Q3JlYXRvciwgIFxuICBpbml0UmVwb3NpdG9yeSwgXG4gIGluaXRpYWxpemVTdGF0ZSwgIFxufSBmcm9tICdyZXBrYS9yZXBvc2l0b3J5JztcbmltcG9ydCB7IHJlYWN0UHJvdmlkZXIgfSBmcm9tICdyZWFjdC1wcm92aWRlci9sZWdhY3knO1xuXG5jb25zdCByZXBrYTogSVJlcG9zaXRvcnlTZXJ2aWNlID0gbmV3IFJlcG9zaXRvcnlTZXJ2aWNlKCkgYXMgSVJlcG9zaXRvcnlTZXJ2aWNlO1xuXG5yZXBrYS5pbml0UmVwb3NpdG9yeSA9IGluaXRSZXBvc2l0b3J5O1xucmVwa2EuaW5pdGlhbGl6ZVN0YXRlID0gaW5pdGlhbGl6ZVN0YXRlO1xucmVwa2EuYWN0aW9ucyA9IGluaXRSZXBvc2l0b3J5PFxuICB7fSwgXG4gIGFueSwgXG4gICgpID0+IHZvaWQgLy9yZWFjdFByb3ZpZGVyVHlwZTx7fSwgYW55PlxuPih7fSwgeyBwcm92aWRlcjogcmVhY3RQcm92aWRlciB9KTtcbnJlcGthLl9fY2FsbCA9IHJlcG9zaXRvcnlDcmVhdG9yO1xuXG5leHBvcnQgeyByZXBrYSwgSVJlcG9zaXRvcnlTZXJ2aWNlIH07XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7OztBQUdPLElBQU0sV0FBTixjQUFxQyxTQUFTO0FBQUEsRUFFbkQsY0FBYztBQUNaLFVBQU07QUFDTixRQUFJLFVBQVU7QUFDZCxjQUFVLElBQUksU0FBWTtBQUN4QixhQUFPLFFBQVEsT0FBTyxHQUFHLElBQUk7QUFBQSxJQUMvQjtBQUNBLFdBQU8sT0FBTyxlQUFlLFNBQVMsV0FBVyxTQUFTO0FBQUEsRUFDNUQ7QUFDRjtBQUVPLElBQU0sY0FBYztBQUNwQixJQUFNQSxp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RUFBRSxJQUFJLE1BQU0sV0FDbkQsTUFBSyxHQUFHLGFBQWEsV0FBVyxFQUFFLElBQUksRUFBRSxPQUFPLEdBQUc7QUFBQSxRQUN0RCxDQUFDO0FBQ0QsZUFBTyxLQUFLLEdBQUcsYUFBYSxnQkFBZ0IsRUFBRSxHQUFHO0FBQ2pELGVBQU8sS0FBSyxHQUFHLGFBQWEsUUFBUSxFQUFFLEdBQUc7QUFBQSxNQUMzQztBQUFBLElBQ0Y7QUFBQSxFQUNGLEdBQUcsQ0FBQyxDQUFDO0FBRUwsTUFBSSxjQUFjLFFBQVc7QUFDM0IsV0FBTyxNQUFNLFNBQVM7QUFBQSxFQUN4QjtBQUVBLFNBQU8sQ0FBQyxPQUFPLEtBQUssR0FBRyxhQUFhLFNBQVMsQ0FBQztBQUNoRDs7O0FDNURBLElBQU0sUUFBNEIsSUFBSSxrQkFBa0I7QUFFeEQsTUFBTSxpQkFBaUI7QUFDdkIsTUFBTSxrQkFBa0I7QUFDeEIsTUFBTSxVQUFVLGVBSWQsQ0FBQyxHQUFHLEVBQUUsVUFBVSxjQUFjLENBQUM7QUFDakMsTUFBTSxTQUFTOyIsCiAgIm5hbWVzIjogWyJGSUVMRFNfUFJFRklYIiwgIkZJRUxEU19QUkVGSVgiXQp9Cg==
