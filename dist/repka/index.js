import {
  createSource
} from "../chunks/GQOZEVKC.chunk.js";
import {
  simpleHook,
  simpleReactProvider
} from "../chunks/ZJZ7MIQU.chunk.js";
import {
  REACTION_STACK
} from "../chunks/HVJOCNRK.chunk.js";
import {
  watch
} from "../chunks/A2LO2IKU.chunk.js";
import {
  FIELDS_PREFIX
} from "../chunks/GWKM27VZ.chunk.js";

// packages/reaction/reaction.ts
var Reaction = class {
  constructor(name, scheduler) {
    this.dependencies = /* @__PURE__ */ new Map();
    this.isDisposed = false;
    this.onUpdate = (updatedProp) => {
      console.log("ON UPDATE", this.dependencies.entries());
      for (const [, props] of this.dependencies.entries()) {
        if (props.has(updatedProp)) {
          this.scheduler();
          return;
        }
      }
    };
    this.name = name;
    this.scheduler = scheduler;
  }
  track(fn) {
    console.log("TRACL", this.name, this.isDisposed);
    if (this.isDisposed) return fn();
    REACTION_STACK.push(this);
    try {
      return fn();
    } finally {
      REACTION_STACK.pop();
    }
  }
  reportDependency(store, prop) {
    if (this.isDisposed) return;
    let deps = this.dependencies.get(store);
    if (!deps) {
      deps = /* @__PURE__ */ new Set();
      this.dependencies.set(store, deps);
      store[`${FIELDS_PREFIX}onUpdate`].push(this.onUpdate);
    }
    deps.add(prop);
  }
  updateScheduler(scheduler) {
    this.scheduler = scheduler;
  }
  undispose() {
    this.isDisposed = false;
  }
  dispose() {
    if (this.isDisposed) return;
    for (const store of this.dependencies.keys()) {
      const index = store[`${FIELDS_PREFIX}onUpdate`].indexOf(this.onUpdate);
      if (index > -1) {
        store[`${FIELDS_PREFIX}onUpdate`].splice(index, 1);
      }
    }
    this.dependencies.clear();
    this.isDisposed = true;
  }
};

// packages/react-provider/hookAndHok.ts
import { useReducer, useRef, useEffect } from "react";
function createHOCWrapper(store, Component) {
  const HOCWrapper = (props) => {
    const [, forceUpdate] = useReducer((x) => x + 1, 0);
    const reactionRef = useRef(null);
    if (reactionRef.current === null) {
      reactionRef.current = new Reaction(`${Component.name}_Observer`, forceUpdate);
    }
    reactionRef.current.updateScheduler(forceUpdate);
    useEffect(() => {
      reactionRef.current.undispose();
      return () => reactionRef.current.dispose();
    }, [reactionRef.current]);
    return reactionRef.current.track(() => {
      return Component(props);
    });
  };
  HOCWrapper.displayName = `RepkaObserver(${Component.displayName || Component.name})`;
  return HOCWrapper;
}
function isReactComponent(arg) {
  return typeof arg === "function" && /^[A-Z]/.test(arg.name);
}
function repkaHookAndHoc(arg) {
  if (arg && typeof arg !== "string" && isReactComponent(arg)) {
    return createHOCWrapper(this, arg);
  }
  try {
    return simpleHook(this, typeof arg);
  } catch (e) {
    console.error("[Repka] \u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u044B\u0437\u043E\u0432\u0430 \u0445\u0443\u043A\u0430. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C, \u0447\u0442\u043E state() \u0432\u044B\u0437\u044B\u0432\u0430\u0435\u0442\u0441\u044F \u043D\u0430 \u0432\u0435\u0440\u0445\u043D\u0435\u043C \u0443\u0440\u043E\u0432\u043D\u0435 \u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0430.", e);
    return this;
  }
}

// packages/repka/index.ts
var repka = (obj) => createSource(
  obj,
  { main: repkaHookAndHoc, getter: simpleReactProvider }
);
export {
  repka,
  watch
};
//# sourceMappingURL=data:application/json;base64,
