import {
  reactProvider
} from "../chunks/PK3WJQZC.chunk.js";
import {
  watcherCreator
} from "../chunks/Z6RRHF6Z.chunk.js";
import "../chunks/4OE77JRV.chunk.js";

// packages/repka/repository.ts
var RepositoryService = class extends Function {
  initializeState(data, options) {
  }
  constructor() {
    super();
    let closure = void 0;
    closure = (...args) => {
      return closure.__call(...args);
    };
    return Object.setPrototypeOf(closure, new.target.prototype);
  }
};
var initRepository = function(repo, options = {}) {
  const keys = Object.keys(repo || {});
  const withOnUpdate = keys.reduce((prev, curr) => {
    let value;
    if (options.prevActions !== void 0 && options.prevActions.get(curr) !== void 0) {
      value = options.prevActions.get(curr);
    } else if (repo) {
      value = repo[curr];
    }
    return { ...prev, [curr]: value };
  }, repo || {});
  return watcherCreator(
    withOnUpdate,
    options.provider,
    options.methods
  );
};
var initializeState = function(data, options = {}) {
  if (!options.prevActions)
    options.prevActions = this?.actions;
  if (!options.provider)
    options.provider = this?.actions?.savedProvider;
  const newActions = initRepository.call(this, data, options);
  this.actions = newActions;
};
function getAllMethodNames(toCheck) {
  const props = [];
  let obj = toCheck;
  do {
    props.push(...Object.getOwnPropertyNames(obj));
  } while (obj = Object.getPrototypeOf(obj));
  return props.sort().filter((e, i, arr) => {
    if (e != arr[i + 1] && typeof toCheck[e] == "function")
      return true;
  });
}
function repositoryCreator(defaultObject, controller, { provider } = {}) {
  let methods;
  let repo = null;
  if (controller) {
    const constructorKeys = getAllMethodNames(controller);
    methods = constructorKeys.reduce(
      (prev, curr) => curr !== "constructor" && typeof controller[curr] === "function" ? { ...prev, [curr]: controller[curr].bind(controller) } : prev,
      {}
    );
    const prevActions = controller.repo?.actions;
    controller.repo = new RepositoryService();
    controller.repo.initRepository = initRepository;
    controller.repo.initializeState = initializeState;
    controller.repo.initializeState(
      prevActions ? { ...prevActions.get(), ...defaultObject } : defaultObject,
      { methods, prevActions, provider: provider || prevActions?.savedProvider || this?.actions?.savedProvider }
    );
  } else {
    repo = initRepository(
      defaultObject,
      { provider: provider || this?.actions?.savedProvider, methods }
    );
  }
  return (repo || controller?.repo?.actions || {}).sourceObj;
}

// packages/repka/index.ts
var repka = new RepositoryService();
repka.initRepository = initRepository;
repka.initializeState = initializeState;
repka.actions = initRepository({}, { provider: reactProvider });
repka.__call = repositoryCreator;
export {
  repka
};
//# sourceMappingURL=data:application/json;base64,
